//*run command1=javac JavaBasics.java   //compile the java file using javac

// // javac filename.java is used to compile a Java source code file (filename.java) into bytecode.
// // This command checks the syntax and semantics of the code and generates a bytecode file (filename.class) if the compilation is successful.
// // java filename.java is used to execute the bytecode generated by the javac command.
// // It runs the Java program by interpreting the bytecode instructions in the filename.class file.
// // In summary, javac compiles the Java source code into bytecode, while java executes the compiledÂ bytecode.

//*run command2=java JavaBasics.java    //Interpret the java file using java extension



// public class JavaBasics {
//     public static void main(String args[]) {
//         System.out.print("Hello Yash");
//            }
// }


//pattern=
// public class JavaBasics {
//     public static void main(String args[]) {
//         System.out.println("****");
//         System.out.println("***");
//         System.out.println("**");
//         System.out.println("*");
//            }
// }


//variables in java
// public class JavaBasics {
//     public static void main(String args[]) {
//         int a = 10;
//         int b = 4;
//         System.out.println(a);
//         System.out.println(b);
//         String name = "yash jadhav";

//         System.out.println(name);


//         a=b;
//         System.out.println(a);
//            }
//}

//Data types in java
// public class JavaBasics {
//     public static void main(String args[]) {
//         byte b=8;
//         System.out.println(b);
//         char ch = 'a';
//         System.out.println(ch);
//         boolean var = false;
//         float price = 10.5;
//         int number = 25;
//         //long
//         //double
//         short n = 240;
//            }
// }



//sum of two numbers=
// public class JavaBasics {
//     public static void main(String args[]) {
//         int a = 10;
//         int b=20;
//         int sum = a+b;
//         System.out.println(sum);
//     }
// }



//sum of a and b using scanner or user input
// import java.util.*;
// public class JavaBasics {
//     public static void main(String args[]) {
//         Scanner sc = new Scanner(System.in);
//         int a = sc.nextInt();
//         int b = sc.nextInt();
//         int sum = a+b;
//         System.out.println(sum);
//     }
// }

//Area of circle using user input
// import java.util.*;
// public class JavaBasics {
//     public static void main(String args[]){
//         Scanner sc = new Scanner(System.in);
//         float rad = sc.nextFloat();
//         float area = 3.14f*rad*rad;
//         System.out.println(area);

//     }
// } 


//calculator using switch
// import java.util.*;

// public class JavaBasics {
//     public static void main(String args[]) {
//         Scanner sc = new Scanner(System.in);
//         System.out.println("enter a : ");
//         int a = sc.nextInt();
//          System.out.println("enter b : ");
//         int b = sc.nextInt();
//          System.out.println("enter operator : ");
//         char operator = sc.next().charAt(0);

//         switch(operator) {
//             case '+' : System.out.println(a+b);
//                       break;
//             case '-' : System.out.println(a-b);
//                        break;
//              case '*' : System.out.println(a*b);
//                       break;
                      
//              case '/' : System.out.println(a/b);
//                       break;
                      
//              case '%' : System.out.println(a%b);
//                       break;
//         }

//     }
// }



//reverse of digit code solved on GFG
// class Solution
// {
//     public long reverse_digit(long n)
//     {
//         // Code here
//         long reversedNumber = 0;
        
//         while(n>0){
//              long lastDigit = n%10;
//              reversedNumber = reversedNumber * 10 + lastDigit;
//              n = n/10;
//         }
//             return reversedNumber;
//     }
//     public static void main(String args[]){
//          Solution sol = new Solution();
//          long n = 200;
//          long reversedNum = sol.reverse_digit(n);
//          System.out.println(reversedNum);
//     }
// }


//print character pattern
// public class JavaBasics{
//     public static void main(String args[]){
//         int n = 4;
//         char ch = 'A';
//         //outer loop
//         for(int line=1;line<=n;line++){
//            //inner loop
//             for(int chars=1;chars<=line;chars++){
//                 System.out.print(ch);
//                 ch++;

//             }
//             System.out.println();
//         }
//     }
// }

//Function Overloading
//func to calculate sum of 2 numbers
//  public class JavaBasics{
// public static int sum(int a, int b){
//     return a + b;
// }

// //func to calculate sum of 3 numbers
// public static int sum(int a, int b, int c){
//     return a + b + c;
// }

// public static void main(String args[]){
//     System.out.println("Sum of two numbers is: " + sum(5,6));
//     System.out.println("Sum of three numbers is: " + sum(5,6,7));
// }
//  }


//Function overloading using data types
// public class JavaBasics{
//     public static int sum(int a, int b){
//         return a + b;
//     }

// public static float sum(float a, float b){
//       return a + b;
// }

// public static void main(String args[]){
//     System.out.println(sum(6,5));
//     System.out.println(sum(7.8f,6.4f));
// }
// }

//topic function overloading using parameters
//check if a number is prime or not
//  public class JavaBasics{
//     public static boolean isPrime(int n){
//         boolean isPrime =true;
//         for(int i=2; i<=Math.sqrt(n); i++){
//             if(n%i == 0){
//                 isPrime = false;
//                 break;
//             }
//         }
//         return isPrime;
//     }

//     public static void main(String args[]){
//         System.out.println(isPrime(8));
//     }
// }



//optimized code of above prime number code
// public class JavaBasics{
//     public static boolean isPrime(int n){
//         boolean isPrime = true;
//         for(int i=2;i<=Math.sqrt(n);i++){
//             if(n%i==0){
//                 isPrime = false;
//                 break;

//             }
//         }
//         return isPrime;
//     }
//     public static void main (String args[]){
//         System.out.println(isPrime(8));
//     }
// }



//print all prime numbers in range
// public class JavaBasics{

//     public static boolean isPrime(int n){
//         boolean isPrime = true;
//         for(int i=2;i<=Math.sqrt(n);i++){
//             if(n%i==0){
//                 isPrime = false;
//                 break;

//             }
//         }
//         return isPrime;
//     }
//     public static void primesInRange(int n){
//         for(int i=2;i<=n;i++){
//            if(isPrime(i)) {
//             System.out.print(i+" ");

//         }
//     }
//     System.out.println();
// }
// public static void main(String args[]){
//     primesInRange(50);
// }
// }

// decimal to binary
// public class JavaBasics{
//     public static void decToBin(int n){
//        int myNum = n;
//         int pow = 0;
//         int binNum = 0;

//         while(n >0){
//             int rem = n % 10;
//             binNum = binNum + (rem * (int)Math.pow(10, pow));

//             pow++;
//             n = n/2;
//         }
//         System.out.println("binary form of " + myNum + "="+ binNum);

//     }
//     public static void main(String args[]){
//         decToBin(19);
//     }
// }

//binary to decimal
//  public class JavaBasics{
//     public static void binToDec(int binNum ){
//         int myNum = binNum;
// int pow =0;
// int decNum=0;

// while(binNum > 0){
//     int lastDigit = binNum % 10;
//    decNum = decNum + (lastDigit *(int)Math.pow(2,pow));

//    pow++;
//    binNum=binNum/10;
// }
// System.out.println("Decimal Form of "+myNum+" is :"+decNum);
// }
// public static void main(String args[]){
//     binToDec(101101);
// }
//  }



//average of three numbers
// import java.util.Scanner;
// public class JavaBasics{

// public static double average(double x,double y,double z) {
//     return (x + y + z)/3;
// }

// public static void main (String[] args){
//     Scanner sc = new Scanner(System.in);
//     System.out.print("Input the first number: ");
//     double x = sc.nextDouble();
//     System.out.print("Input the second number: ");
//     double y = sc.nextDouble();
//     System.out.print("Input the third number: ");
//     double z =sc.nextDouble();
//     System.out.print("The average value is " + average(x, y, z)+"\n");
// }
// }


//check number even or not
// import java.util.Scanner;
// public class JavaBasics{
//     public static boolean isEven(int number){
//         if(number % 2 == 0){
//             return true;
//         }
//         else {
//             return false;
//         }
//     }
// public static void main(String[]args){
//     Scanner sc =new Scanner(System.in);
//     int num;
//     System.out.print("Enter an integer: ");
//     num = sc.nextInt();

//     if(isEven(num)){
//         System.out.println("Number is even");

    
//     }else{
//         System.out.println("Number is odd");
//     }
// }
// }



//check number is palindrome or not?
// import java.util.Scanner;
// public class JavaBasics{
// public static boolean isPalindrome(int c){
//     int n = c;
//     int s = 0;
//     int r = 0;
//     while(n != 0){
//          r = n % 10;
//         s = s * 10 + r;
//         n = n / 10;
//     }
//     if (c == s){
//         return true;

//     }
//     return false;
// }


// public static void main (String args[]){
//   System.out.println("Please Enter a number : ");
//   Scanner sc = new Scanner(System.in);
//   int n = sc.nextInt();

//   if(isPalindrome(n)){
//     System.out.println("Number : " + n + " is a palindrome");
//   } else {
//     System.out.println("Number : " + n + " is not a palindrome");
//   }
// }
// }






//sum od digits in an integer
// import java.util.Scanner;
// public class JavaBasics {
// public static void main(String[] args) {
// Scanner sc = new Scanner(System.in);
// System.out.print("Input an integer: ");
// int digits = sc.nextInt();
// System.out.println("The sum is " + sumDigits(digits));
// }
// public static int sumDigits(int n) {
// int sumOfDigits = 0;
// while(n > 0) {
// int lastDigit = n % 10;
// sumOfDigits += lastDigit;
// n /= 10;
// }
// return sumOfDigits;
// }
// }



//pattern 2
// print Hollow Rectangle pattern
// public class JavaBasics{
//     public static void hollow_rectangle(int totRows, int totCols) {
//         //outer loop
//         for(int i=1; i<=totRows; i++){
//             //inner - columns
//             for(int j=1; j<=totCols; j++){
//                 //cel - (i,j)
//                 if(i==1 || i ==totRows || j==1 || j == totCols){
//                     //boundary cells
//                     System.out.print("*");
//                 }else{
//                     System.out.print(" ");
//                 }
//                 }
//                 System.out.println();
//             }
//         }
//         public static void main(String args[]){
//             hollow_rectangle(4, 5);
//         }
//     }



//Inverted half pyramid with numbers
// public class JavaBasics{
//     public static void inverted_half_pyramid_withNumbers(int n){
//         for(int i=1;i<=n;i++){
//             // inner-numbers
//             for(int j=1;j<=n-i+1;j++){
//                 System.out.print(j+" ");
//             }
//               System.out.println();
//         }
      
//     }


// public static void main(String args[]){
//     inverted_half_pyramid_withNumbers(5);
// }
// }




//inverted and rotated half pyramid
// public class JavaBasics{
//     public static void inverted_and_rotated_half_pyramid(int n){
//         //outer loop
//         for(int i=1;i<=n;i++){
          
//             //spaces
//             for(int j=1;j<=n-i;j++){
//                 System.out.print(" ");
//             }

//             //stars
//             for(int j=1;j<=i;j++){
//                 System.out.print("*");
//             }
            
//           System.out.println();
//         }

//     }

//     public static void main(String args[]){
//         inverted_and_rotated_half_pyramid(8);
//     }
// }


//FLOYDS Triangle
// public class JavaBasics{
//     public static void FLOYDS_triangle(int n){
//         int counter = 1;
//         //outer
//         for(int i=1;i<=n;i++){
//          //inner - how many times counter will print
//          for(int j=1;j<=i;j++){
//             System.out.print(counter+" ");
//             counter++;

//          }
//          System.out.println();
//         }

//     }
//     public static void main(String args[]){
//         FLOYDS_triangle(5);
//     }
// }




//0-1 Triangle pattern
// public class JavaBasics{
//     public static void zero_one_triangle(int n){
//         //outer
//         for(int i=1;i<=n;i++){

//             //inner
//             for(int j=1;j<=i;j++){
//                 if((i+j)%2==0){
//                     System.out.print("1");
//                 }else{
//                     System.out.print("0");
//                 }
//             }
//             System.out.println();
//         }
//     }

//     public static void main(String args[]){
//         zero_one_triangle(5);
//     }
// }


//BUTTERFLY pattern
// public class JavaBasics{
//     public static void butterfly_pattern(int n){
//         //first half
//         //outer
//         for(int i=1;i<=n;i++){
//        //inner
//        //stars
//        for(int j=1;j<=i;j++){
//         System.out.print("*");
//        }
//        //spaces
//        for(int j=1;j<=2*(n-i);j++){
//         System.out.print(" ");
//        }
//        //stars
//        for(int j=1;j<=i;j++){
//         System.out.print("*");
//        }
//        System.out.println();

//         }

//     //second half
//     //outer
//     for(int i=n;i>=1;i--){
//         // inner
//          //stars
//        for(int j=1;j<=i;j++){
//         System.out.print("*");
//        }
//        //spaces
//        for(int j=1;j<=2*(n-i);j++){
//         System.out.print(" ");
//        }
//        //stars
//        for(int j=1;j<=i;j++){
//         System.out.print("*");
//        }
//        System.out.println();
//     }
//     }


//     public static void main(String args[]){
//         butterfly_pattern(4);
//     }
// }






//solid rhombus pattern
// public class JavaBasics{
//     public static void solid_rhombus(int n){
//         //outer loop
//         for(int i=1;i<=n;i++){
//             //inner loops
//             //spaces
//             for(int j=1;j<=(n-i);j++){
//               System.out.print(" ");
//             }
//             //stars
//             for(int j=1;j<=n;j++){
//                 System.out.print("*");
//             }
//             System.out.println();
//         }
//     }

//     public static void main(String args[]){
//         solid_rhombus(5);
//     }
// }





//hollow rhombus
// public class JavaBasics{
//     public static void hollow_rhombus(int n){
//         //outer loop
//         for(int i=1;i<=n;i++){
//             //inner loop
//             //spaces
//             for(int j=1;j<=(n-i);j++){
//                 System.out.print(" ");
//             }
//             //hollow rectangle -stars
//             for(int j=1;j<=n;j++){
//                 if(i==1 || i==n || j==1 || j==n){
//                     System.out.print("*");
//                 }else{
//                     System.out.print(" ");
//                 }
//             }
//             System.out.println();
//         }
//     }

//     public static void main(String args[]){
//         hollow_rhombus(8);
//     }
// }








///ARRAY\

//linear search
// public class JavaBasics{
//     public static int linearSearch(int numbers[],int key){
//         for(int i=0;i<numbers.length;i++){
//             if(numbers[i]==key){
//                 return i;
//             }
//         }
//         return -1;
//     }
//     public static void main(String args[]){
//         int numbers[]={2,4,6,8,10,12,14,16};
//         int key = 10;

//         int index = linearSearch(numbers,key);
//         if(index==-1){
//             System.out.println("NOT FOUND");
//         }else{
//             System.out.println("Key is at index : " + index);
//         }
       
//     }
// }




// Largest numbers in array!!
// public class JavaBasics{
//     public static int getLargest(int numbers[]){
//         int largest = Integer.MIN_VALUE;
//         int smallest = Integer.MAX_VALUE;
//          for(int i=0;i<numbers.length;i++){
//             if(largest<numbers[i]){
//                 largest = numbers[i];
//             }
//             if(smallest>numbers[i]){
//                 smallest = numbers[i];
//             }
//          }
//          System.out.println("smallest value is : " + smallest);
//          return largest;
//     }
//     public static void main(String args[]){
//         int numbers[]={1,2,6,3,5};
//         System.out.println("largest value is : " + getLargest(numbers));
//     }
// }






//Binary Search
// public class JavaBasics{
//     public static int binarySearch(int numbers[],int key){
//         int start = 0, end = numbers.length-1;

//         while(start <= end){
//             int mid =(start+end)/2;
//             //comparisons
//             if(numbers[mid]==key){
//                 return mid;

//             }
//             if(numbers[mid]<key){
//                 start=mid+1;
//             }else{
//                 end = mid-1;
//             }

//         }
//         return -1;
//     }

//     public static void main(String args[]){
//         int numbers[]={2,4,6,7,8,10,12,14};
//         int key =14;
//         System.out.println("index for key is: "+binarySearch(numbers,key));
//     }
// }



//reverse an array
// public class JavaBasics{
//     public static void reverse(int numbers[]){
//         int first = 0, last =numbers.length-1;

//         while (first<last) {

//             //swap
//             int temp = numbers[last];
//             numbers[last]=numbers[first];
//             numbers[first]=temp;

//             first++;
//             last--;
//         }
//     }

//     public static void main(String args[]){
//         int numbers[] ={3,5,7,8,6,8,9};

//         reverse(numbers);
//         for(int i=0;i<numbers.length;i++){
//             System.out.print(numbers[i]+" ");
//         }
//         System.out.println();
//     } 
// }



//pairs in an array
// public class JavaBasics{
//     public static void printPairs(int numbers[]){
//         for(int i=0;i<numbers.length;i++){
//             int curr=numbers[i];
//             for(int j=i+1;j<numbers.length;j++){
//                 System.out.print("("+curr+","+numbers[j]+")");
//             }
//             System.out.println();

//         }
//     }
//     public static void main(String args[]){
//         int numbers[]={2,4,6,8,10};
//         printPairs(numbers);
//     }
// }







//subarrays
// public class JavaBasics{
//     public static void printSubarrays(int numbers[]){
    // int ts=0;
//         for(int i=0;i<numbers.length;i++){
//             int start = i;
//             for(int j=i;j<numbers.length;j++){
//                 int end = j;
//                 for(int k=start;k<=end;k++){
//                     System.out.print(numbers[k]+" ");

//                 }
                //    ts++;
//                 System.out.println();
//             }
//             System.out.println();
//         }
        //   System.out.println("total subarrays = "+ts);
//     }
//     public static void main(String args[]){
//         int numbers[]={2,4,6,8,10};
//         printSubarrays(numbers);
//     }
// }



//MAX SUBARRAY SUM
// public class JavaBasics{
//     public static void printSubarrays(int numbers[]){
//         int currSum=0;
//         int maxSum= Integer.MIN_VALUE;

//         for(int i=0;i<numbers.length;i++){
//             int start = i;
//             for(int j=i;j<numbers.length;j++){
//                 int end = j;
//                 currSum = 0;
//                 for(int k=start;k<=end;k++){
//                   //subarray sum
//                   currSum+=numbers[k];

//                 }
//                 System.out.println(currSum);
//                 if(maxSum<currSum){
//                     maxSum=currSum;
//                 }

//             }
//         }
//         System.out.println("max sum = "+ maxSum);
//     }




//     public static void main(String[] args) {
//         int numbers[]={2,4,6,8,10};
//         printSubarrays(numbers);
//     }
// }





//kadane's algorithm

// public class JavaBasics{
//     public static void kadanes(int numbers[]){
//           int ms = Integer.MIN_VALUE;
//           int cs = 0;

//           for(int i=0;i<numbers.length;i++){
//             cs=cs+numbers[i];
//             if(cs<0){
//                 cs=0;
//             }
//             ms=Math.max(cs,ms);
//           }
//           System.out.println("our max subarray sum is : "+ ms);
//     }

//     public static void main(String[] args) {
//         int numbers[]={-2,-3,4,-1,-2,1,5,-3};
//         kadanes(numbers);
//     }
// }










// Trapping Rainwater

// public class JavaBasics{
//     public static int trappedRainwater(int height[]){       int n = height.length;
//         //calculate left max boundary - array
//         int leftMax[] = new int[n];
//         leftMax[0]=height[0];
//         for(int i=1;i<n;i++){
//             leftMax[i]=Math.max(height[i],leftMax[i-1]);
//         }
//         //calculate right max boundary - array
//         int rightMax[]= new int[n];
//         rightMax[n-1]=height[n-1];
//         for(int i=n-2;i>=0;i--){
//             rightMax[i]=Math.max(height[i],rightMax[i+1]);
//         }

//         int trappedWater = 0;
//         //loop
//         for(int i=0;i<n;i++){
//             //water level = min(leftmax bound,rightmax bound)

//             int waterLevel = Math.min(leftMax[i],rightMax[i]);

//             //trapped water = waterlevel - height[i]
//             trappedWater+= waterLevel - height[i];
//         }

//         return trappedWater;

//     } 

//     public static void main(String[] args) {
//         int height[]={4,2,0,6,3,2,5};
//         System.out.println(trappedRainwater(height));
//     }
// }



//buy sell stocks
// public class JavaBasics{
//     public static int buyAndSellStocks(int prices[]){
//         int buyPrice = Integer.MAX_VALUE;
//         int maxProfit = 0;

//         for(int i=0;i<prices.length;i++){
//             if(buyPrice<prices[i]){
//                 int profit = prices[i] - buyPrice;
//                 maxProfit = Math.max(maxProfit,profit);
//             }else{
//                 buyPrice = prices[i];
//             }
//         }
//         return maxProfit;
//     }


//     public static void main(String[] args) {
//         int prices[] = {7,1,5,3,6,4};
//         System.out.println(buyAndSellStocks(prices));
//     }
// }





//sorting
//Bubble sort
// public class JavaBasics{
//     public static void bubbleSort(int arr[]){
//         for(int turn=0; turn<arr.length-1; turn++){
//             for(int j=0; j<arr.length-1-turn; j++){
//                 if(arr[j]>arr[j+1]){
//                     //swap
//                     int temp = arr[j];
//                     arr[j] = arr[j+1];
//                     arr[j+1] = temp;
//                 }
//             }
//         }
//     }
//     public static void printArr(int arr[]){
//         for(int i=0;i<arr.length;i++){
//             System.out.print(arr[i]+" ");
//         }
//         System.out.println();
//     }

//     public static void main(String args[]){
//         int arr[] = {5,4,1,3,2};
//         bubbleSort(arr);
//         printArr(arr);
//     }
// }






///selection sort
// public class JavaBasics{
//     public static void selectionSort(int arr[]){
//         for(int i=0;i<arr.length-1;i++){
//             int minPos = i;
//             for(int j=i+1;j<arr.length;j++){
//                 if(arr[minPos]>arr[j]){
//                     minPos=j;
//                 }
//             }

//             //swap
//             int temp =arr[minPos];
//             arr[minPos]=arr[i];
//             arr[i]=temp;
//         }
//     }

//       public static void printArr(int arr[]){
//         for(int i=0;i<arr.length;i++){
//             System.out.print(arr[i]+" ");
//         }
//         System.out.println();
//     }
//     public static void main(String[] args) {
//         int arr[]={5,4,1,3,2,9,5,6,7,8,9};
//         selectionSort(arr);
//         printArr(arr);
       
//     }
// }



//Insertion sort
// public class JavaBasics{
//     public static void insertionSort(int arr[]){
//      for(int i=0;i<arr.length;i++){
//         int curr = arr[i];
//         int prev=i-1;
//         //finding out the correct pos to insert
//         while(prev>=0&&arr[prev]>curr){
//             arr[prev+1] = arr[prev];
//             prev--;
//         }
//         //insertion
//         arr[prev+1]=curr;
//      }
//     }
//   public static void printArr(int arr[]){
//         for(int i=0;i<arr.length;i++){
//             System.out.print(arr[i]+" ");
//         }
//         System.out.println();
//     }



//     public static void main(String[] args) {
//         int arr[]={5,4,1,3,2};
//         insertionSort(arr);
//         printArr(arr);
//     }
// }



//couting sort
// public class JavaBasics{
//     public static void countingSort(int arr[]){
//         int largest = Integer.MIN_VALUE;
//         for(int i=0;i<arr.length;i++){
//             largest = Math.max(largest,arr[i]);
//         }

//         int count[]=new int[largest+1];
//         for(int i=0; i<arr.length; i++){
//             count[arr[i]]++;
//         }

//         //sorting
//         int j =0;
//         for(int i=0;i<count.length;i++){
//                while(count[i]>0){
//                       arr[j]=i;
//                       j++;
//                       count[i]--;
//                }
//         }
//     }
//     public static void printArr(int arr[]){
//         for(int i=0;i<arr.length;i++){
//             System.out.print(arr[i]+" ");
//         }
//         System.out.println();
//     }

//     public static void main(String[] args) {
//      int arr[]={5,4,1,3,2};
//      countingSort(arr);
//      printArr(arr);    
//     }

// }













//2D Array
// import java.util.Scanner;
// public class JavaBasics{
//     public static boolean search(int matrix[][],int key){
          
//         for(int i=0;i<matrix.length;i++){
//             for(int j=0;j<matrix[0].length;j++){
//                 if(matrix[i][j]==key){
//                     System.out.println("found at cell ( "+i+","+j+" )");
//                     return true;
//                 }
//             }
              
//         }
//         System.out.println("key not found");
//         return false;
//     }
//     public static void main(String args[]){
//         int matrix[][]=new int[3][3];
//         int n=matrix.length,m=matrix[0].length;

//         Scanner sc=new Scanner(System.in);
//         for(int i=0; i<n;i++){
//             for(int j=0; j<m;j++){
//                 matrix[i][j]=sc.nextInt();
//             }
//         }

//         //output
//         for(int i=0;i<n;i++){
//             for(int j=0;j<m;j++){
//                 System.out.print(matrix[i][j] + " ");
//             }
//               System.out.println();
//         }
//         search(matrix,5);
    
//     }
// }



//spiral metrix
// public class JavaBasics{
//  public static void printSpiral(int matrix[][]){
//     int startRow=0;
//     int startCol=0;
//     int endRow = matrix.length-1;
//     int endCol = matrix[0].length-1;

//     while(startRow<=endRow && startCol<=endCol){
//         //top
//           for(int j=startCol;j<=endCol;j++){
//             System.out.print(matrix[startRow][j]+" ");
//           }

//         //right
//         for(int i=startRow+1;i<=endRow; i++){
//             System.out.print(matrix[i][endCol]+" ");

//         }

//         //bottom
//         for(int j=endCol-1;j>=startCol;j--){
//             if(startRow==endRow){
//                 break;
//             }
//             System.out.print(matrix[endRow][j]+" ");
//         }

//         //left
//         for(int i=endRow-1;i>=startRow+1;i--){
//              if(startCol==endCol){
//                 break;
//             }
//             System.out.print(matrix[i][startCol]+" ");

//         }
//         startCol++;
//         startRow++;
//         endCol--;
//         endRow--;

        
//     }
//     System.out.println();
//  }
//  public static void main(String[] args) {
//     int matrix[][] = {{1, 2, 3, 4},
//                       {5, 6, 7, 8},
//                       {9, 10, 11, 12},
//                       {13, 14, 15, 16}};

//         printSpiral(matrix);
                      
//  }
// }



//diagonal sum
//  public class JavaBasics{
//     public static int diagonalSum(int matrix[][]){
//         int sum=0;
//         //first diagonal sum
//         for(int i=0;i<matrix.length;i++){
//           for(int j=0;j<matrix[0].length;j++){
//             if(i==j){
//                 sum+=matrix[i][j];
//             }
//             else if(i+j == matrix.length-1){
//                 sum += matrix[i][j];
//             }
//           }
//         }
//         return sum;
//     }
//another solution for this
// class JavaBasics
// {
//     public int DiagonalSum(int[][] matrix)
//     {
//         // code here
//         int n = matrix.length;
//         int primaryDiagonalSum = 0;
//         int secondaryDiagonalSum=0;
        
//         for(int i=0;i<n;i++){
//             primaryDiagonalSum += matrix[i][i];
//             secondaryDiagonalSum += matrix[i][n-1-i];
//         }
//         return primaryDiagonalSum + secondaryDiagonalSum;
//     }
// }
//  public static void main(String[] args) {
    
//     int matrix[][] = {{1, 2, 3, 4},
//                       {5, 6, 7, 8},
//                       {9, 10, 11, 12},
//                       {13, 14, 15, 16}};

//    int diagonalSumValue = diagonalSum(matrix);
        
//                       // Printing the diagonal sum
//  System.out.println("Diagonal Sum: " + diagonalSumValue);
                      
//  }
//  }





//search in sorted Matrix
// public class JavaBasics{
//     public static boolean staircaseSearch(int matrix[][], int key){
//           int row = 0, col=matrix[0].length-1;

//           while(row<matrix.length&&col>=0){
//             if(matrix[row][col]==key){
//                 System.out.println("found key at ("+row+","+col+")");
//                 return true;
//             }
//             else if(key<matrix[row][col]){
//                 col--;
//             }
//             else{
//                 row++;
//             }
//           }
//        System.out.println("key not found!");
//        return false;
//     }
//     public static void main(String[] args) {
//         int matrix[][]={{10,20,30,40},
//                         {15,25,35,45},
//                          {27,29,37,48},
//                         {32,33,39,50}};

//         int key=33;
//         staircaseSearch(matrix,key);

//     }
// }













//strings
// import java.util.*;
// public class JavaBasics{
//     public static void main(String args[]){
//         char arr[]={'a','b','c','d'};
//         String str = "abcd";
//         String str2 = new String("xyz"); 
    


// //Strings are immutable
// Scanner sc = new Scanner(System.in);
// String name;

// name = sc.nextLine();
// System.out.println(name);
//     }
// }


//finding the length of String
// public class JavaBasics{
//     public static void main(String[] args) {
//         String fullName="Yash Jadhav";
//         System.out.println(fullName.length());
//     }
// }



//string concatenation
// public class JavaBasics{
//     public static void main(String[] args) {
        
    
// String firstName = "Yash";
// String lastName = "Jadhav";
// String fullName = firstName + " " + lastName;
// System.out.println(fullName);

//     }
// }







//use of charAt in strings
// public class JavaBasics{
// public static void printLetters(String str){
//     for(int i=0;i<str.length();i++){
//         System.out.print(str.charAt(i)+" ");
//     }
//     System.out.println();
// }

//     public static void main(String[] args) {
//         String firstName= "Yash";
//         String lastName="Jadhav";
//         String fullName=firstName + " " + lastName;
//         printLetters(fullName);
//     }
// }





//check if string is palindrome 
// public class JavaBasics{
//     public static boolean isPalindrome(String str){
//         for(int i=0;i<str.length()/2;i++){
//             int n= str.length();
//             if(str.charAt(i) != str.charAt(n-1-i)){
//                 return false;
//             }
//         }
//         return true;
//     }
    
//     public static void main(String[] args) {
//         String str = "racecar";
//         System.out.println(isPalindrome(str));
//     }
// }



////shortest path with direction question in string
// public class JavaBasics{
//     public static float getShortestPath(String path){
//         int x = 0,y = 0;

//         for(int i=0;i<path.length();i++){
//             char dir = path.charAt(i);

//             //south
//             if(dir == 'S'){
//                 y--;
//             }
//             // North
//             else if(dir == 'N'){
//                 y++;
//             }
//             //west
//             else if(dir == 'W'){
//                 x--;
//             }
//             //east
//             else{
//                 x++;
//             }
//         }
//         int X2 =x*x;
//         int Y2 = y*y;
//         return (float)Math.sqrt(X2 + Y2);
//     }

//   public static void main(String args[]){
//        String path = "WNEENESENNN";
//        System.out.println(getShortestPath(path));
//   }
// }



//string function compare
// public class JavaBasics{
//     public static void main(String args[]){
//         String s1 = "Yash";
//         String s2 = "Yash";
//         String s3 = new String("Yash");

//         if(s1==s2){
//             System.out.println("Strings are equal");

//         }else{
//             System.out.println("Strings are not equal");
//         }

//         if(s1==s3){
//             System.out.println("Strings are equal");
//          }else{
//             System.out.println("Strings are not equal");
//         }

//         if(s1.equals(s3)){
//              System.out.println("Strings are equal");
//         }else{
//              System.out.println("Strings are not equal");

//         }
//         }
//     }








//string function substring = str.substring(starting index,ending index)
// public class JavaBasics{
//     public static String substring(String str,int si,int ei){
//         String substr = "";
//         for(int i=si;i<ei;i++){
//             substr += str.charAt(i);
//         }
//         return substr;
//     }
//     public static void main(String[] args) {
//         String str = "Yash jadhav";
//        // System.out.println(substring(str,0,5));

//          //or method//
//          System.out.println(str.substring(0,5));
//     }
// }













//print largest string in lexicographic order=
//lexicographic order= one string is lesser than other string by apphabetic order for each character

// public class JavaBasics{
//     public static void main(String[] args) {
//         String fruits[] = {"apple","mango","banana"};

//         String largest = fruits[0];
//         for(int i=1;i<fruits.length;i++){
//             if(largest.compareTo(fruits[i])<0){
//                 largest = fruits[i];
//             }
//         }
//         System.out.println(largest);
//     }
// }








//String Builder 
// public class JavaBasics{
//     public static void main(String[] args) {
//         StringBuilder sb = new StringBuilder("");
//         for(char ch='a';ch<='z';ch++){
//             sb.append(ch);
//         }
//         System.out.println(sb);
//     }
// }








//convert letters to uppercase
// public class JavaBasics{
//     public static String toUpperCase(String str){
//         StringBuilder sb = new StringBuilder("");
         
//         char ch = Character.toUpperCase(str.charAt(0));
//         sb.append(ch);

//         for(int i=1;i<str.length();i++){
//             if(str.charAt(i)==' '&& i<str.length()-1){
//                 sb.append(str.charAt(i));
//                 i++;
//                 sb.append(Character.toUpperCase(str.charAt(i)));
//             }else{
//                 sb.append(str.charAt(i));
//             }
//         }
//         return sb.toString();
//     }

//     public static void main(String[] args) {
//         String str = "hi, i am yash jadhav";
//         System.out.println(toUpperCase(str));
//     }
// }





// String compression question
// public class JavaBasics{
//     public static String compress(String str){
//         // String newStr = "";
//         StringBuilder newStr = new StringBuilder("");
//         for(int i=0;i<str.length();i++){
//             Integer count = 1;
//             while(i<str.length()-1 && str.charAt(i)==str.charAt(i+1)){
//                 count++;
//                 i++;
//             }
//         //     newStr += str.charAt(i);
//         //     if(count>1){
//         //         newStr += count.toString(); 
//         //     }

//         // }
//         //  return newStr;
//         newStr.append(str.charAt(i));
//         if (count > 1) {
//             newStr.append(count);
//         }
//     }
//     return newStr.toString();
//     }
//    public static void main(String[] args) {
//     String str = "aaabbcccdd";
//     System.out.println(compress(str));
//    }
// }






//BIT MANIPULATION=

// bitwise operators:
// 1>Binary AND (&)
// 2>Binary OR (!)
// 3>Binary XOR(^)
// 4>Binary One's Complement(~)
// 5)Binary Left Shift(<<)
// 5)Binary Right Shift(>>)



//Binary AND&
// 0&0 0
// 0&1 0
// 1&0 0
// 1&1 1
// public class JavaBasics{
//     public static void main(String[] args) {
//         System.out.println(5&6);
//     }
// }



//Binary OR|
// 0&0 0
// 0&1 1
// 1&0 1
// 1&1 1
//  public class JavaBasics{
//     public static void main(String[] args) {
//         System.out.println(5|6);
//     }
// }




//Binary XOR^
// 0^0 0
// 0^1 1
// 1^0 1
// 1^1 1
//  public class JavaBasics{
//     public static void main(String[] args) {
//         System.out.println(5^6);
//     }
// }




//Binary One's Complement
// ~0 1
// ~1 0
//  public class JavaBasics{
//     public static void main(String[] args) {
//         System.out.println(~7);
//     }
// }




//Binary Left Shift<<
// formula => a<<b = a*2^b        => 5<<2=>5*2^2=>20
//  public class JavaBasics{
//     public static void main(String[] args) {
//         System.out.println(5<<2);
//     }
// }







//Binary Right Shift>>
// formula => a>>b = a\2^b=>5>>2=>5\2^2=>1
//  public class JavaBasics{
//     public static void main(String[] args) {
//         System.out.println(6>>1);
//     }
// }




//even or odd check with bit manipulation
// public class JavaBasics{
//     public static void oddOrEven(int n){
//         int bitMask =1;
//         if((n&bitMask)==0){
//             //even number
//             System.out.println("Even number");
//         }else{
//             System.out.println("odd number");
//         }
//     }
//     public static void main(String[] args) {
//         oddOrEven(3);
//         oddOrEven(11);
//         oddOrEven(14);
//     }
// }




//Get ith Bit
// public class JavaBasics{
//      public static int getIthBit(int n,int i){
//         int bitMask = 1<<i;
//         if((n&bitMask)==0){
//             return 0;
//         }else{
//             return 1;
//         }

//      }
//      public static void main(String[] args) {
//         System.out.println(getIthBit(10,2));
//      }
// }





//set ith bit
// public class JavaBasics{
//     public static int setIthBit(int n,int i){
//         int bitMask = 1<<i;
//         return n | bitMask;
//     }

//     public static void main(String[] args) {
//         System.out.println(setIthBit(10,2));
//     }
// }





//clear ith bit
// public class JavaBasics{
//     public static int clearIthBit(int n,int i){
//         int bitMask = ~(1<<i);
//         return n&bitMask;
//     }
//     public static void main(String[] args) {
//         System.out.println(clearIthBit(10,1));
//     }
// }





//update ith bit  .. write this code in above codes to run.
// public class JavaBasics{
//     public static int updateIthBit(int n,int i){
//         if(newBit == 0){
//             return clearIthBit(n,i);
//         }else{
//             return setIthBit(n,i)
//         }

//     or 

//     n=clearIthBit(n,i);
//     int BitMask = neWBit<<1;
//     return n|BitMask;
//     }
// }






//clear ith bit
// public class JavaBasics{
//     public static int clearIBits(int n,int i){
//         int bitMask = (~0)<<i;
//         return n&bitMask;

//     }
//     public static void main(String[] args) {
//         System.out.println(clearIBits(15,2));
//     }
// }





//clear range of bits
// public class JavaBasics{
//     public static int clearBitsinRange(int n,int i,int j){
//         int a = ((~0)<<(j+1));
//         int b = (1<<i)-1;
//         int bitMask = a|b;
//         return n&bitMask;
//     }
//     public static void main(String[] args) {
//         System.out.println(clearBitsinRange(10,2,4));
//     }
// }






// //check if a number is a power of 2 or not
// public class JavaBasics{
//     public static boolean isPowerOfTwo(int n){
//         return (n&(n-1))==0;
//     }
//     public static void main(String[] args) {
//         System.out.println(isPowerOfTwo(15));
//     }
// }




//count set bits in number
// public class JavaBasics{
// public static int countSetBits(int n){
//     int count  = 0;
//     while(n>0){
//         if((n&1)!=0){//are our LSB
//             count++;
//         }
//         n = n>>1;
//     }
//     return count;
// }
// public static void main(String[] args) {
//     System.out.println(countSetBits(10));
// }
// }






//fast exponentiation
// public class JavaBasics{
//     public static int fastExpo(int n,int a){
//         int ans = 1;
//         while(n>0){
//             if((n&1)!=0){
//                 ans = ans*a;
//             }
//             a= a*a;
//             n=n>>1;
//         }
//         return ans;
//     }
//     public static void main(String[] args) {
//         System.out.println(fastExpo(3,5));
//     }
// }























///////////////////////////////////////////////////////////////////////
///recursion=dividing a problem into smaller instances
//print numbers from n to 1 (decreasing order)
// public class JavaBasics{
//     public static void printDec(int n){
//         if(n==1){
//             System.out.println(n);
//             return;
//         }
//         System.out.print(n+" ");
//         printDec(n-1);
//     }
//     public static void main(String[] args) {
//         int n=10;
//         printDec(n);
//     }
// }






//print numbers from n to 1(increasing order)
// public class JavaBasics{
//     public static void printInc(int n){
//         if(n==1){
//             System.out.print(n+" ");
//             return;
//         }
//         printInc(n-1);
//         System.out.print(n+" ");
//     }
//     public static void main(String[] args) {
//         int n =5;
//         printInc(n);
//     }
// }









//Find Factorial of N 
// public class JavaBasics{
//     public static int fact(int n){
//         if(n==0){
//             return 1;
//         }
//         int fnm1 = fact(n-1);
//         int fn = n*fact(n-1);
//         return fn;
//     }

//     public static void main(String[] args) {
//         int n=5;
//         System.out.println(fact(n));
//     }
// }








//print sum of first n natural numbers
// public class JavaBasics{
//     public static int calcSum(int n){
//         if(n==1){
//             return 1;
//         }
//         int snm1 = calcSum(n-1);
//         int sn = n+calcSum(n-1);
//         return sn;
//     }
//     public static void main(String[] args) {
//         int n =5;
//         System.out.println(calcSum(n));
//     }
// }







//print Nth Fibonacci number
// public class JavaBasics{
//     public static int fib(int n){
//         if(n==0 || n==1){
//             return n;
//         }
//         int fnm1 = fib(n-1);
//         int fnm2 = fib(n-2);
//         int fn = fnm1+fnm2;
//         return fn;
//     }
//     public static void main(String[] args) {
//         int n = 5;
//         System.out.println(fib(n));
//     }
// }






//check if a given array is sorted
// public class JavaBasics {
//     public static boolean isSorted(int[] arr,int i){
//      if(i==arr.length-1){
//         return true;
//      }

//      if(arr[i]>arr[i+1]){
//         return false;
//      }
//      return isSorted(arr,i+1);
//     }
//     public static void main(String[] args) {
//         int arr[] = {1,3,6,9,2,4};
//         System.out.println(isSorted(arr,0));
//     }
// }








//find first occurance 
// public class JavaBasics{
//     public static int firstOccurence(int arr[],int key,int i){
//         if(i==arr.length){
//             return -1;
//         }
//         if(arr[i]==key){
//             return i;
//         }
//         return firstOccurence(arr, key, i+1);
//     }
//     public static void main(String[] args) {
//         int arr[] = {8,3,6,9,5,10,2,5,3};
//         System.out.println(firstOccurence(arr, 5, 0));
//     }
// }






//find last occurence
// public class JavaBasics{
//     public static int lastOccurence(int arr[],int key,int i){
//         if(i==arr.length){
//             return -1;
//         }
//         int isFound=lastOccurence(arr, key, i+1);
//         if(isFound == -1 && arr[i]==key){
//             return i;
//         }
//         return isFound;
        
//     }
//     public static void main(String[] args) {
//         int arr[] = {8,3,6,9,5,10,2,5,3};
//         System.out.println(lastOccurence(arr, 5, 0));
//     }
// }




//PRINT X TO POWER N
// public class JavaBasics{
//     public static int power(int x,int n){
//         if(n==0){
//             return 1;
//         }
//       int xnm1 = power(x,n-1);
//       int xn = x*xnm1;
//       return xn;
//     }
//     public static void main(String[] args) {
//         System.out.println(power(2,10));
//     }
// }

 


//Tiling Problem
// public class JavaBasics{
//     public static int tilingProblem(int n){//2 x n(floor size)
//         //base case
//         if(n==0||n==1){
//             return 1;
//         }

//         //vertical choice
//         int fnm1 = tilingProblem(n-1);
//         //horizontal choice
//         int fnm2 = tilingProblem(n-2);

//         int totWays = fnm1 +fnm2;
//                return totWays;
//     }
//     public static void main(String args[]){
//         System.out.println(tilingProblem(2));
//     }
// }


















//Remove Duplicates in a String

// public class JavaBasics{
//     public static void removeDuplicates(String str,int idx, StringBuilder newStr,boolean map[]){
//         if(idx==str.length()){
//             System.out.println(newStr);
//             return;
//         }

//            char currChar = str.charAt(idx);
//            if(map[currChar-'a']==true){
//             removeDuplicates(str, idx+1, newStr, map);
//            }
//            else{
//             map[currChar-'a']=true;
//             removeDuplicates(str, idx+1, newStr.append(currChar), map);
//            }
//     }
//     public static void main(String[] args) {
//         String str = "appnnacollege";
//         removeDuplicates(str, 0, new StringBuilder(""), new boolean[26]);
//     }
// }









//Friends Pairing Problem
// public class JavaBasics{
//     public static int friendsPairing(int n){
//       //base case
//       if(n==1||n==2){
//         return n;
//       }

//         //choice
//         //single
//         int fnm1= friendsPairing(n-1);
//          //PAIR
//         int fnm2= friendsPairing(n-2);
//         int pairWays = (n-1)*fnm2;

//         //totWays
//         int totWays = fnm1 + pairWays;
//         return totWays;
//     }
//     public static void main(String[] args) {
//         System.out.println(friendsPairing(3));
//     }
// }



//binary Strings Problems
// print all binary strings of size N without consecutive ones
// public class JavaBasics{
//     public static void printBinStrings(int n,int lastPlaces,String str){
//         //base case
//         if(n==0){
//             System.out.println(str);
//             return;
//         }

//         //task
//         printBinStrings(n-1, 0, str+"0");
//         if(lastPlaces==0){
//             printBinStrings(n-1,1, str+"1");
//         }
//     }
//     public static void main(String[] args) {
//         printBinStrings(3, 0, "");
//     }
// }















//divide and conquer
//merge sort
// public class JavaBasics{
//     public static void printArr(int arr[]){
//         for(int i=0;i<arr.length;i++){
//             System.out.print(arr[i]+" ");
//         }
//         System.out.println();
//     }
//     public static void mergeSort(int arr[],int si,int ei){
//         if(si>=ei){
//             return;
//         }
//         int mid = si+(ei-si)/2;
//         mergeSort(arr,si,mid); //left
//         mergeSort(arr,mid+1,ei);//right
//         merge(arr,si,mid,ei);
//     };

//     public static void merge(int arr[],int si,int mid,int ei){
//     int temp[] = new int[ei-si+1];
//     int i =si;
//     int j = mid+1;
//     int k = 0;

//     while(i<=mid&&j<=ei){
//         if(arr[i]<arr[j]){
//             temp[k]=arr[i];
//             i++;
//         }else{
//             temp[k]=arr[j];
//             j++;
//         }
//         k++;
//     }
//     //left part
//     while(i<=mid){
//         temp[k++]=arr[i++];
//     }
//      //right part
//      while(j<=ei){
//         temp[k++]=arr[j++];
//     }
//     //copy temp to original arr
//     for(k=0,i=si;k<temp.length;k++,i++){
//         arr[i]=temp[k];
//     }
// }
//     public static void main(String[] args) {
//         int arr[]={6,3,9,5,2,8};
//         mergeSort(arr,0,arr.length-1);
//         printArr(arr);
//     }
// }











//quick sort
// public class JavaBasics{
//    public static void printArr(int arr[]){
//     for(int i=0;i<arr.length;i++){
//     System.out.print(arr[i]+" ");
//    }
//    System.out.println();
// }
// public static void quickSort(int arr[],int si,int ei){
//     if(si>=ei){
//         return;
//     }
//     int pIdx = partition(arr,si,ei);
//     quickSort(arr,si,pIdx-1);
//     quickSort(arr,pIdx+1,ei);
// }

// public static int partition(int arr[],int si,int ei){
//     int pivot = arr[ei];
//     int i = si-1;
//     for(int j=si;j<ei;j++){
//         if(arr[j]<=pivot){
//             i++;
//             int temp = arr[j];
//             arr[j]=arr[i];
//             arr[i]=temp;
//         }
//     }
//     i++;
//      int temp = pivot;
//             arr[ei]=arr[i];
//             arr[i]=temp;
//             return i;
// }
// public static void main(String[] args) {
//     int arr[]={6,3,9,8,2,5};
//     quickSort(arr,0,arr.length-1);
//     printArr(arr);
// }
// }






//sorted and roated array code
// public class JavaBasics{
//     public static int search(int arr[],int tar,int si,int ei){
//         //base case
//         if(si>ei){
//             return -1;
//         }
//         //kaam
//         int mid = si+(ei-si)/2;
//         //case found
//         if(arr[mid]==tar){
//             return mid;
//         }
//         //mid on L1
//         if(arr[si]<=arr[mid]){
//             //case a:left
//             if(arr[si]<=tar&&tar<=arr[mid]){
//                 return search(arr,tar,si,mid);
//             }else{
//                 //case b:right
//                return search(arr,tar,mid+1,ei);
//             }
//         }

//         //mid on L2
//         else{
//             //case c:right
//             if(arr[mid]<=tar&&tar<=arr[ei]){
//                 return search(arr,tar,mid+1,ei);
//             }else{
//                 //case d:left
//                 return search(arr,tar,si,mid-1);
//             }
//         }

//     }
//     public static void main(String args[]){
//         int arr[]={4,5,6,7,0,1,2};
//         int target = 6;
//         int tarIdx = search(arr,target,0,arr.length-1);
//         System.out.println(tarIdx);
//     }
// }









//backtracking
// public class JavaBasics{
//     public static void findSubsets(String str,String ans,int i){
//         //base case
//            if(i==str.length()){
//             if(ans.length()==0){
//                 System.out.println("null");
//             }
//             System.out.println(ans);
//             return;
//            }

//         //recursion case
//             //yes choice
//             findSubsets(str,ans+str.charAt(i),i+1);
//                //no choice
//             findSubsets(str, ans, i+1);
//     }

//     public static void main(String[] args) {
//         String str = "abc";
//         findSubsets(str, "", 0);
//     }
// }















//findpermutations
// public class JavaBasics{
//     public static void findpermutations(String str,String ans){
//         //base case
//       if(str.length()==0){
//         System.out.println(ans);
//         return;
//       }

//         //recursion
//         for(int i=0;i<str.length();i++){
//             char curr = str.charAt(i);
//            String Newstr = str.substring(0,i)+str.substring(i+1);
//             findpermutations(Newstr, ans+curr);
//         }

//     }
//     public static void main(String[] args) {
//         String str = "abc";
//         findpermutations(str, "");
//     }
// }





//n queen problem
// public class JavaBasics{

//     public static boolean isSafe(char board[][],int row,int col){
//         //vertical up
//             for(int i=row-1;i>=0;i--){
//                 if(board[i][col]=='Q'){
//                     return false;
//                 }
//             }
//         //diagonal left up
//         for(int i=row-1,j=col-1;i>=0 && j>=0;i--,j--){
//             if(board[i][j]=='Q'){
//                 return false;
//             }
//         }

//         //diagonal right up
//         for(int i=row-1,j=col+1;i>=0 && j<board.length; i--,j++){
//             if(board[i][j]=='Q'){
//                 return false;
//             }
//         }
//         return true;
//     }
//     public static boolean nQueens(char board[][],int row){
//         //base
//         if(row==board.length){
//             // printBoard(board);
//             count++;
//             return true;
//         }

//         //column loop
//         for(int j=0;j<board.length;j++){
//             if(isSafe(board,row,j)){
//             board[row][j]='Q';
//             if(nQueens(board,row+1)){
//                 return true;
//             }
//             board[row][j]='x';
//             }
//         }
//         return false;
//     }

//     public static void printBoard(char board[][]){
//         System.out.println("---------chess board---------------");
//         for(int i=0;i<board.length;i++){
//             for(int j=0;j<board.length;j++){
//                 System.out.print(board[i][j] + " ");
//             }
//             System.out.println();
//         }
      
//     }
    
//     static int count=0;
//     public static void main(String[] args) {
//         int n = 5;
//         char board[][]=new char[n][n];
//         for(int i=0;i<n;i++){
//             for(int j=0;j<n;j++){
//                 board[i][j]='x';
//             }
//         }
//         if(nQueens(board,0)){
//             System.out.println("solution is possible");
//             printBoard(board);
//         }
//         else{
//             System.out.println("solution is not possible");
//         }
//         System.out.println("total ways to solve n queens = " + count);
//     }
// }







// //grid ways
// public class JavaBasics{
//     public static int gridWays(int i,int j,int n,int m){
//         //base case
//         if(i==n-1&&j==m-1){//condn for last cell
//               return 1;

//         }else if(i==n||j==m){
//             return 0;

//         }
     
//       int w1=gridWays(i+1, j, n, m);
//       int w2=gridWays(i, j+1, n, m);
//       return w1+w2;
//     }

//     public static void main(String args[]){
//         int n=3,m=3;
//         System.out.println(gridWays(0,0,n,m));
//     }
// }






//sudoku code
// public class JavaBasics{

//        public static boolean isSafe(int sudoku[][],int row,int col,int digit){
//         //column
//         for(int i=0;i<=8;i++){
//             if(sudoku[i][col]==digit){
//                 return false;
//             }
//         }
//         //row
//         for(int j=0;j<=8;j++){
//             if(sudoku[row][j]==digit){
//                 return false;
//             }
//         }

//         //grid
//         int sr = (row/3)*3;
//         int sc = (col/3)*3;
//         //3x3 grid
//         for(int i=sr;i<sr+3;i++){
//             for(int j=sc;j<sc+3;j++){
//                 if(sudoku[i][j]==digit){
//                     return false;
//                 }
//             }

//         }
//         return true;
//        }

//     public static boolean sudokuSolver(int sudoku[][],int row,int col){
//         //base case
//            if(row==9&&col==0){
//             return true;
           
//            }

//         //recursion step
//         int nextRow=row,nextCol=col+1;
//         if(col+1==9){
//             nextRow=row+1;
//             nextCol=0;
//         }

//         if(sudoku[row][col] !=0){
//             return sudokuSolver(sudoku, nextRow, nextCol);
//         }
//         for(int digit=1;digit<=9;digit++){
//             if(isSafe(sudoku,row,col,digit)){
//                 sudoku[row][col]=digit;
//                 if(sudokuSolver(sudoku,nextRow,nextCol)){
//                     return true;
//                 }
//                 sudoku[row][col]=0;
//             }
//         }
//         return false;
//     }
//           public static void printsudoku(int sudoku[][]){
//             for(int i=0;i<9;i++){
//                 for(int j=0;j<9;j++){
//                     System.out.print(sudoku[i][j]+" ");

//                 }
//                 System.out.println();
//             }
//           }
//     public static void main(String[] args) {
//         int sudoku[][]={{0,0,8,0,0,0,0,0,0},
//         {4,9,0,1,5,7,0,0,2},
//         {0,0,3,0,0,4,1,9,0},
//         {1,8,5,0,6,0,0,2,0},
//         {0,0,0,0,2,0,0,6,0},
//         {9,6,0,4,0,5,3,0,0},
//         {0,3,0,0,7,2,0,0,4},
//         {0,4,9,0,3,0,0,5,7},
//         {8,2,7,0,0,9,0,1,3}};

//         if(sudokuSolver(sudoku, 0, 0)){
//             System.out.println("solution exists");
//             printsudoku(sudoku);
//         }else{
//             System.out.println("solution does not exist");
//         }
//     }
// }





// import java.util.ArrayList;
// public class JavaBasics{
//     public static void main(String[] args) {
//         ArrayList<Integer> list = new ArrayList<>();
//         ArrayList<String> list2 = new ArrayList<>();
//         ArrayList<Boolean> list3 = new ArrayList<>();

//         list.add(1);//o(1)
//         list.add(2);
//         list.add(3);
//         list.add(4);

//         list.add(1,9);//O(n)
//         System.out.println(list);

        //get operation o(1)
    //    int element = list.get(2);
    //    System.out.println(element);


       //remove element o(n)
    //    list.remove(2);
    //    System.out.println(list);

       //set o(n)
    //    list.set(2,10);
    //    System.out.println(list);


    //contains o(n)
    // System.out.println(list.contains(1));
    // System.out.println(list.contains(11));
//     }
// }







// import java.util.ArrayList;
// public class JavaBasics{
//     public static void main(String[] args) {
//         ArrayList<Integer> list = new ArrayList<>();
//         ArrayList<String> list2 = new ArrayList<>();
//         ArrayList<Boolean> list3 = new ArrayList<>();

//         list.add(1);//o(1)
//         list.add(2);
//         list.add(3);
//         list.add(4);
//         list.add(5);

//         // System.out.println(list.size());
//         // //print the arraylist
//         // for(int i=0;i<list.size();i++){
//         //     System.out.print(list.get(i) + " ");
//         // }
//         // System.out.println();
//         // //reverse print o(n)
//         // for(int i=list.size()-1;i>=0;i--){
//         //     System.out.print(list.get(i) + " ");
//         // }


//         //maximum number of array
//         // int max = Integer.MIN_VALUE;
//         // for(int i=0;i<list.size();i++){
//         //     max = Math.max(max,list.get(i));
//         // }

//         // System.out.println("max element = " + max);      
//     }
// }











//swap 2 numbers
// import java.util.ArrayList;
// public class JavaBasics{
//     public static void swap(ArrayList<Integer> list,int idx1,int idx2){
//              int temp = list.get(idx1);
//              list.set(idx1,list.get(idx2));
//              list.set(idx2, temp);
//     }

//     public static void main(String[] args) {
//         ArrayList<Integer> list = new ArrayList<>();
//         list.add(3);
//         list.add(2);
//         list.add(5);
//         list.add(6);
//         list.add(8);
//         list.add(4);

//         int idx1=1, idx2=3;
//         System.out.println(list);
//         swap(list,idx1,idx2);
//         System.out.println(list);
//     }
// }










// import java.util.ArrayList;
// import java.util.Collections;
// //sorting in arraylist
// public class JavaBasics{
// public static void main(String[] args) {
//     ArrayList<Integer> list = new ArrayList<>();
//     list.add(3);
//     list.add(2);
//     list.add(5);
//     list.add(6);
//     list.add(8);
//     list.add(4);
  

//     System.out.println(list);
//     Collections.sort(list);//ascending
//     System.out.println(list);
//     Collections.sort(list,Collections.reverseOrder());//descending
//     System.out.println(list);
// }
// }







//2d arraylist
// import java.util.ArrayList;
// public class JavaBasics{
//     public static void main(String[] args) {
//         ArrayList<ArrayList<Integer>> mainList = new ArrayList<>();
//         ArrayList<Integer> list = new ArrayList<>();
//         list.add(1);
//         list.add(2);
//         mainList.add(list);

//         ArrayList<Integer> list2 = new ArrayList<>();
//         list2.add(3);
//         list2.add(4);
//         mainList.add(list2);

//         for(int i=0;i<mainList.size();i++){
//             ArrayList<Integer> currList = mainList.get(i);
//             for(int j=0; j<currList.size();j++){
//                 System.out.print(currList.get(j)+ " ");
//             }
//             System.out.println();
//         }
//         System.out.println(mainList);
//     }
// }






//container with most water(brute force approach)
// import java.util.ArrayList;

// public class JavaBasics{
//     public static int storeWater(ArrayList<Integer>height){
//      int maxWater = 0;

//      //brute force
//      for(int i=0;i<height.size();i++){
//         for(int j=i+1;j<height.size();j++){
//             int ht = Math.min(height.get(i),height.get(j));
//             int width = j-i;
//             int currWater = ht*width;
//             maxWater = Math.max(maxWater,currWater);
//         }
//      }
// return maxWater;
//     }
//     public static void main(String args[]){
//         ArrayList<Integer> height = new ArrayList<>();
//         //1,8,6,2,5,4,8,3,7
//         height.add(1);
//         height.add(8);
//         height.add(6);
//         height.add(2);
//         height.add(5);
//         height.add(4);
//         height.add(8);
//         height.add(3);
//         height.add(7);

//         System.out.println(storeWater(height));
//     }
// }





//container with 2 pointer approach
// import java.util.ArrayList;
// public class JavaBasics{
// public static int storeWater(ArrayList<Integer> height){
//   int maxWater = 0;
//   int lp = 0;
//   int rp= height.size()-1;

//   while(lp<rp){
//   //calculate water area
//   int ht = Math.min(height.get(lp),height.get(rp));
//   int width = rp-lp;
//   int currWater = ht*width;
//   maxWater = Math.max(maxWater,currWater);

//   //update ptr
//   if(height.get(lp)<height.get(rp)){
//     lp++;
//   }else{
//     rp--;
//   }
//   }
//   return maxWater;
// }

// public static void main(String args[]){
//     ArrayList<Integer> height = new ArrayList<>();
//     height.add(1);
//     height.add(8);
//     height.add(6);
//     height.add(2);
//     height.add(5);
//     height.add(4);
//     height.add(8);
//     height.add(3);
//     height.add(7);

//     System.out.println(storeWater(height));
// }
// }




//Pair sum 1=(brute force)
// import java.util.ArrayList;
// public class JavaBasics{
//     public static boolean pairSum1(ArrayList<Integer>list,int target){
//              for(int i=0;i<list.size();i++){
//                 for(int j=i+1;j<list.size();j++){
//                     if(list.get(i) + list.get(j) == target){
//                         return true;
//                     }
//                 }
//              }
//              return false;
//     }

//     public static void main(String args[]){
//         ArrayList<Integer>list = new ArrayList<>();
//         1,2,3,4,5,6
//         list.add(1);
//         list.add(2);
//         list.add(3);
//         list.add(4);
//         list.add(5);
//         list.add(6);
//         int target = 5;
//       System.out.println(pairSum1(list,target));
//     }
// }





//Pair Sum 1 == (2 pointer Approach)
// import java.util.ArrayList;
// public class JavaBasics{
//     public static boolean pairSum1(ArrayList<Integer>list,int target){
//         int lp = 0;
//         int rp = list.size()-1;

//         while(lp!=rp){
//             //case1
//             if(list.get(lp)+list.get(rp) == target){
//                 return true;
//             }

//             //case2
//             if(list.get(lp)+list.get(rp)<target){
//                 lp++;
//             }else{
//                 rp--;
//             }

//         }
//         return false;
//     }

//     public static void main(String[] args) {
//         ArrayList<Integer>list=new ArrayList<>();
//         //1,2,3,4,5,6
//         list.add(1);
//         list.add(2);
//         list.add(3);
//         list.add(4);
//         list.add(5);
//         list.add(6);
//         int target = 5;
//         System.out.println(pairSum1(list,target));
//     }
// }








//pair sum-2   O(n)=linear time complexity
// import java.util.ArrayList;
// public class JavaBasics{
//     public static boolean pairSum2(ArrayList<Integer>list,int target){
//         int bp = -1;//not a valid index , it is breaking point
//         int n = list.size();
//         for(int i=0;i<list.size();i++){
//             if(list.get(i)>list.get(i+1)){
//                 bp = i;
//                 break;
//             }
//         }

//         int lp = bp+1; //smallest
//         int rp = bp; //largest


//         while(lp!= rp){
//             //case1
//             if(list.get(lp)+list.get(rp) == target){
//                 return true;
//             }

//             //case2
//             if(list.get(lp)+list.get(rp)<target){
//                 lp=(lp+1)%n;
//             }else{
//                 rp = (n+rp-1)%n;
//             }
//         }
//         return false;
//     }



//     public static void main(String args[]){
//         ArrayList<Integer>list=new ArrayList<>();
//         //11,15,6,8,9,10 - sorted and rotated
//         list.add(11);
//         list.add(15);
//         list.add(6);
//         list.add(8);
//         list.add(9);
//         list.add(10);
//         int target = 16;
//         System.out.println(pairSum2(list,target));
//     }
// }










